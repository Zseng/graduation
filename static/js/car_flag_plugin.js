/**
 * Created by Max on 17/1/6.
 */
var arr = ['沃克斯豪尔', '沃尔沃', '奥迪', '欧宝', '保时捷', '大众', '雪铁龙', '文图瑞', '雷诺', '标致'
    , '别克', '凯迪拉克', '劳斯莱斯', '福特', '捷豹', '吉普', '路虎', '林肯', '庞蒂亚克', '阿尔法罗密欧', '法拉利'
    , '菲亚特', '依维柯', '阿斯顿马丁', '名爵', '罗孚', '博格瓦德', '雪弗兰', '宝马', '奔驰', '道奇', '水星', '普利茅斯'
    , '劳斯莱斯', '萨博', '斯柯达', '博诺兹', '欧洲之星', '猛狮', '兰博基尼', '福特野马', '奥兹莫比尔', '宝马MINI', '通用'
    , '吉姆斯', '利斯特', '摩根', '菲斯克', '泰脱拉', '比扎瑞尼', 'AIXAM', '博通', '道奇蛙蛇', '讴歌', '宾利', '迈巴赫'
    , '布加迪', '威兹曼', '梅尔库斯', '柯尼塞格', '巴博斯', 'DS', '冈伯特', '悍马', '卡尔森', '路斯特', '玛莎拉蒂', '帕加尼'
    , 'AC', '西亚特', '阿斯顿马丁Lagonda', '土星', '塞恩', '蓝旗亚', '精灵', '罗森', '克尔维特', '萨伦', '克莱斯勒', '特斯拉'
    , '迈凯轮', '吉列塔', '谢尔比', '奥斯汀', '奥斯汀-希利', '马科斯', '英帕拉', '北京现代', '宝龙', '北京福田', '北京吉普'
    , '北京汽车', '北京轻型汽车', '比亚迪', '昌河铃木', '昌河', '长安商用', '长城', '东风标致', '东风雪铁龙', '东风悦达起亚'
    , '东南汽车', '广州本田', '哈飞', '红旗', '华晨', '江铃', '解放', '金杯', '猎豹', '美鹿', '奇瑞', '全顺', '赛豹', '上海汽车'
    , '神龙', '夏利', '一汽大众', '申龙', '跃进', '中国一汽', '中华', '中兴', '大通', '上海大众', '长安福特', '长安铃木', '荣威'
    , '华普', '金龙', '北汽制造', '天马', '陆风', '天津一汽', '福田', '上海通用', '东风本田', '奔腾标致', '东风风神', '广汽丰田'
    , '海马', '江淮', '吉利', '力帆', '全球鹰', '斯柯达', '三菱', '众泰', '瑞麟', '帝豪', '威麟', '开瑞', '宝骏', '威旺', '传棋'
    , '野马', '福迪', '观致', '黄海', '华泰', '海格', '吉奥', '理念', '启辰', '英伦', '汇众', '腾势', '马自达', '五菱', '纳智捷'
    , '黑豹', '长丰', '九龙', '大迪', '永源', '庆铃', '南汽', '昌河铃木', '日野', '大发', '本田', '英菲尼迪', '马自达', '日产'
    , '斯巴鲁', '丰田', '铃木', '大宇', '现代', '起亚', '雷诺三星', '双龙', '东风日产', '雷克萨斯', '光冈', '皇冠', '斯派朗'
    , '塔塔', '拉达', '嘎斯', '拉拉其', '纳塞尔', '世爵', '凯博赫', '达西亚', '宝腾', 'Elfin', '第二国产车'];

function levenshtein(a, b) {
    var al = a.length + 1;
    var bl = b.length + 1;
    var result = [];
    var temp = 0;
    // 创建一个二维数组
    for (var i = 0; i < al; result[i] = [i++]) {
    }
    for (var i = 0; i < bl; result[0][i] = i++) {
    }
    for (i = 1; i < al; i++) {
        for (var j = 1; j < bl; j++) {
            // 判断最上方和最左方数字是否相等
            temp = a[i - 1] == b[j - 1] ? 0 : 1;
            // result[i - 1][j] + 1 左方数字
            // result[i][j - 1] + 1 上方数字
            // result[i - 1][j - 1] + temp 左上方数字
            result[i][j] = Math.min(result[i - 1][j] + 1, result[i][j - 1] + 1, result[i - 1][j - 1] + temp);
        }
    }
    return result[i - 1][j - 1];

}

function judgeStr(str) {
    var resultArr = [];
    for (var i = 0, len = arr.length; i < len; i++) {
        var result = levenshtein(str, arr[i]);
        if ((arr[i].length - result) >= str.length) {
            resultArr.push(arr[i]);
        }
        ;
    }
    return resultArr;
}
